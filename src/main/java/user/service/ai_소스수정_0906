package user.service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.List;
import java.util.Map;

@Service
public class TourApiService {

    /*
     * 공통 API 통신 및 JSON 파싱 로직을 처리하는 범용 함수
     * @param apiPath 호출할 API의 경로 (예: "ldongCode2", "lclsSystmCode2")
     * @param extraParams 추가 파라미터 (예: "lDongListYn=Y")
     * @return API 응답에서 추출된 데이터 리스트
     */
    private List<Map<String, Object>> fetchAndParse(String apiPath, String extraParams) throws IOException {
        StringBuilder urlBuilder = new StringBuilder("https://apis.data.go.kr/B551011/KorService2/" + apiPath);
        urlBuilder.append("?" + URLEncoder.encode("numOfRows", "UTF-8") + "=" + "300");
        urlBuilder.append("&" + extraParams);

        // 공통 *필수* 파라미터
        urlBuilder.append("&" + URLEncoder.encode("serviceKey", "UTF-8") + "=" + "DOpLI7EuzXtbDtCQ40p5sHOuJ9NW89eB%2Fd7hUs3CQsVoZ6d6q2HZiDViRsYqCJuabArktqa8tJcOmldsY5A7eg%3D%3D");
        urlBuilder.append("&" + URLEncoder.encode("MobileOS", "UTF-8") + "=" + "WEB");
        urlBuilder.append("&" + URLEncoder.encode("MobileApp", "UTF-8") + "=" + "Root.Lab");
        urlBuilder.append("&" + URLEncoder.encode("_type", "UTF-8") + "=" + "json");

        URL url = new URL(urlBuilder.toString());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Content-type", "application/json");

        BufferedReader rd;
        if (conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } else {
            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
        }
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = rd.readLine()) != null) {
            sb.append(line);
        }
        rd.close();
        conn.disconnect();

        ObjectMapper objectMapper = new ObjectMapper();

        // 응답이 비어있거나 올바르지 않은 경우 빈 리스트 반환
        if (sb.length() == 0) {
            return Collections.emptyList();
        }

        Map<String, Object> resultMap = objectMapper.readValue(sb.toString(), new TypeReference<Map<String, Object>>() {});

        Map<String, Object> response = (Map<String, Object>) resultMap.get("response");
        if (response == null) { return Collections.emptyList(); }

        Map<String, Object> body = (Map<String, Object>) response.get("body");
        if (body == null) { return Collections.emptyList(); }

        // items 객체의 존재 여부 및 타입 확인
        Object itemsObject = body.get("items");
        if (itemsObject == null) { return Collections.emptyList(); }

        List<Map<String, Object>> itemList = null;

        // items가 Map 객체인 경우
        if (itemsObject instanceof Map) {
            Map<String, Object> items = (Map<String, Object>) itemsObject;
            Object itemObject = items.get("item");

            // item이 List인지, 단일 Map인지 확인
            if (itemObject instanceof List) {
                itemList = (List<Map<String, Object>>) itemObject;
            } else if (itemObject instanceof Map) {
                // item이 단일 객체인 경우, 리스트로 감싸줌
                itemList = List.of((Map<String, Object>) itemObject);
            }
        }

        // 최종 데이터가 null인 경우 빈 리스트 반환
        if (itemList == null) {
            System.out.println("총 아이템 개수: 0");
            return Collections.emptyList();
        }

        return itemList;
    }

    /* [01] 법정동코드조회(ldongCode2) */
    @Scheduled(cron = "0 0 9 * * *")
    public List<Map<String, Object>> ldongCode2() throws IOException {
        List<Map<String, Object>> result = fetchAndParse("ldongCode2", URLEncoder.encode("lDongListYn", "UTF-8") + "=" + "Y");
        System.out.println("1. 총 아이템 개수: " + result.size());
        return result;
    }

    /* [02] 분류체계 코드조회(lclsSystmCode2) */
    @Scheduled(cron = "0 0 9 * * *")
    public List<Map<String, Object>> lclsSystmCode2() throws IOException {
        List<Map<String, Object>> result = fetchAndParse("lclsSystmCode2", URLEncoder.encode("lclsSystmListYn", "UTF-8") + "=" + "Y");
        System.out.println("2. 총 아이템 개수: " + result.size());
        return result;
    }

    /* [03] 위치기반조회(locationBasedList2) */
    @Scheduled(cron = "0 0 9 * * *")
    public List<Map<String, Object>> locationBasedList2() throws IOException {
        // 이 부분에 필요한 파라미터는 API 문서에 따라 추가해야 합니다.
        // 현재는 mapX, mapY 등 필수 파라미터가 빠져있으므로 오류가 발생할 수 있습니다.
        String extraParams = URLEncoder.encode("lDongRegnCd", "UTF-8") + "=" + "28";
        extraParams += "&" + URLEncoder.encode("arrange", "UTF-8") + "=" + "S";
        extraParams += "&" + URLEncoder.encode("mapX", "UTF-8") + "=" + "126.7052062";
        extraParams += "&" + URLEncoder.encode("mapY", "UTF-8") + "=" + "37.4562557";
        extraParams += "&" + URLEncoder.encode("radius", "UTF-8") + "=" + "20000";
        List<Map<String, Object>> result = fetchAndParse("locationBasedList2", extraParams);
        System.out.println("3. 총 아이템 개수: " + result.size());
        return result;
    }
}